{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualMachineName": {
      "type": "string",
      "defaultValue": "ca-lab-vm"
    },
    "registryMachineName": {
      "type": "string",
      "defaultValue": "registry"
    },
    "productionMachineName": {
      "type": "string",
      "defaultValue": "production"
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_B1ms"
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "student"
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "ca-lab-vnet"
    },
    "networkInterfaceName": {
      "type": "string",
      "defaultValue": "ca-lab-vm001"
    },
    "registryInterfaceName": {
      "type": "string",
      "defaultValue": "registry001"
    },
    "productionInterfaceName": {
      "type": "string",
      "defaultValue": "production001"
    },
    "networkSecurityGroupName": {
      "type": "string",
      "defaultValue": "ca-lab-vm-nsg"
    },
    "adminPassword": {
      "type": "string",
      "defaultValue": "1Cloud_Academy_Labs!"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "calabdisks01"
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS"
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24"
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "default"
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24"
    },
    "publicIpAddressName": {
      "type": "string",
      "defaultValue": "ca-lab-vm-ip"
    },
    "publicIpAddressType": {
      "type": "string",
      "defaultValue": "Dynamic"
    },
    "registryPublicIpAddressName": {
      "type": "string",
      "defaultValue": "registry-ip"
    },
    "productionPublicIpAddressName": {
      "type": "string",
      "defaultValue": "production-ip"
    }
  },
  "resources": [
    {
      "name": "[parameters('virtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2016-04-30-preview",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', replace(concat(parameters('storageAccountName'), resourceGroup().name),'-', ''))]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[parameters('virtualMachineName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "7.3",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "vhd": {
              "uri": "[concat(concat(reference(resourceId('Microsoft.Storage/storageAccounts', replace(concat(parameters('storageAccountName'), resourceGroup().name),'-', '')), '2015-06-15').primaryEndpoints['blob'], 'vhds/'), parameters('virtualMachineName'), '20170526205708.vhd')]"
            },
            "name": "[parameters('virtualMachineName')]"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "[parameters('registryMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2016-04-30-preview",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('registryInterfaceName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', replace(concat(parameters('storageAccountName'), resourceGroup().name),'-', ''))]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[parameters('registryMachineName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "7.3",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "vhd": {
              "uri": "[concat(concat(reference(resourceId('Microsoft.Storage/storageAccounts', replace(concat(parameters('storageAccountName'), resourceGroup().name),'-', '')), '2015-06-15').primaryEndpoints['blob'], 'vhds/'), parameters('registryMachineName'), '20170526205708.vhd')]"
            },
            "name": "[parameters('registryMachineName')]"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('registryInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "[parameters('productionMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2016-04-30-preview",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('productionInterfaceName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', replace(concat(parameters('storageAccountName'), resourceGroup().name),'-', ''))]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[parameters('productionMachineName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "7.3",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "vhd": {
              "uri": "[concat(concat(reference(resourceId('Microsoft.Storage/storageAccounts', replace(concat(parameters('storageAccountName'), resourceGroup().name),'-', '')), '2015-06-15').primaryEndpoints['blob'], 'vhds/'), parameters('productionMachineName'), '20170526205708.vhd')]"
            },
            "name": "[parameters('productionMachineName')]"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('productionInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "lab-vm.hosts-config",
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "https://gallery.azure.com/artifact/20161101/microsoft.custom-script-linux-arm.2.0.50/Artifacts/MainTemplate.json"
        },
        "parameters": {
          "vmName": {
            "value": "[parameters('virtualMachineName')]"
          },
          "location": {
            "value": "[resourceGroup().location]"
          },
          "fileUris": {
            "value": []
          },
          "commandToExecute": {
            "value": "bash -c 'yum install -y yum-utils device-mapper-persistent-data lvm2 && yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo && yum install -y docker-ce-18.03.1.ce-1.el7.centos && mkdir -p /certs && wget -O /certs/ca.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/ca.crt && wget -O /certs/cert.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/server.cert && wget -O /certs/key.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/server.key && mkdir -p /etc/docker && echo \\{\\\"hosts\\\":\\[\\\"unix:///var/run/docker.sock\\\",\\\"tcp://0.0.0.0:2376\\\"\\],\\\"tls\\\":true,\\\"tlsverify\\\":true,\\\"tlscacert\\\":\\\"/certs/ca.pem\\\",\\\"tlscert\\\":\\\"/certs/cert.pem\\\",\\\"tlskey\\\":\\\"/certs/key.pem\\\"\\} > /etc/docker/daemon.json && systemctl enable docker && systemctl start docker && usermod -aG docker student && echo 10.0.0.5 registry.ca-labs.com >> /etc/hosts && echo 10.0.0.6 production.ca-labs.com >> /etc/hosts && mkdir -p /etc/docker/certs.d/registry.ca-labs.com:5000/ && cp /certs/ca.pem /etc/docker/certs.d/registry.ca-labs.com:5000/ca.crt'"
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('virtualMachineName'))]"
      ]
    },
    {
      "name": "registry.hosts-config",
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "https://gallery.azure.com/artifact/20161101/microsoft.custom-script-linux-arm.2.0.50/Artifacts/MainTemplate.json"
        },
        "parameters": {
          "vmName": {
            "value": "[parameters('registryMachineName')]"
          },
          "location": {
            "value": "[resourceGroup().location]"
          },
          "fileUris": {
            "value": []
          },
          "commandToExecute": {
            "value": "bash -c 'yum install -y yum-utils device-mapper-persistent-data lvm2 && yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo && yum install -y docker-ce-18.03.1.ce-1.el7.centos && mkdir -p /certs && wget -O /certs/ca.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/ca.crt && wget -O /certs/cert.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/server.cert && wget -O /certs/key.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/server.key && mkdir -p /etc/docker && echo \\{\\\"hosts\\\":\\[\\\"unix:///var/run/docker.sock\\\",\\\"tcp://0.0.0.0:2376\\\"\\],\\\"tls\\\":true,\\\"tlsverify\\\":true,\\\"tlscacert\\\":\\\"/certs/ca.pem\\\",\\\"tlscert\\\":\\\"/certs/cert.pem\\\",\\\"tlskey\\\":\\\"/certs/key.pem\\\"\\} > /etc/docker/daemon.json && systemctl enable docker && systemctl start docker && usermod -aG docker student && echo 10.0.0.5 registry.ca-labs.com >> /etc/hosts && echo 10.0.0.6 production.ca-labs.com >> /etc/hosts && mkdir -p /etc/docker/certs.d/registry.ca-labs.com:5000/ && cp /certs/ca.pem /etc/docker/certs.d/registry.ca-labs.com:5000/ca.crt'"
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('registryMachineName'))]"
      ]
    },
    {
      "name": "production.hosts-config",
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "https://gallery.azure.com/artifact/20161101/microsoft.custom-script-linux-arm.2.0.50/Artifacts/MainTemplate.json"
        },
        "parameters": {
          "vmName": {
            "value": "[parameters('productionMachineName')]"
          },
          "location": {
            "value": "[resourceGroup().location]"
          },
          "fileUris": {
            "value": []
          },
          "commandToExecute": {
            "value": "bash -c 'yum install -y yum-utils device-mapper-persistent-data lvm2 && yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo && yum install -y docker-ce-18.03.1.ce-1.el7.centos && mkdir -p /certs && wget -O /certs/ca.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/ca.crt && wget -O /certs/cert.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/server.cert && wget -O /certs/key.pem https://raw.githubusercontent.com/cloudacademy/docker-software-delivery/master/.certs/server.key && mkdir -p /etc/docker && echo \\{\\\"hosts\\\":\\[\\\"unix:///var/run/docker.sock\\\",\\\"tcp://0.0.0.0:2376\\\"\\],\\\"tls\\\":true,\\\"tlsverify\\\":true,\\\"tlscacert\\\":\\\"/certs/ca.pem\\\",\\\"tlscert\\\":\\\"/certs/cert.pem\\\",\\\"tlskey\\\":\\\"/certs/key.pem\\\"\\} > /etc/docker/daemon.json && systemctl enable docker && systemctl start docker && usermod -aG docker student && echo 10.0.0.5 registry.ca-labs.com >> /etc/hosts && echo 10.0.0.6 production.ca-labs.com >> /etc/hosts && mkdir -p /etc/docker/certs.d/registry.ca-labs.com:5000/ && cp /certs/ca.pem /etc/docker/certs.d/registry.ca-labs.com:5000/ca.crt'"
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('productionMachineName'))]"
      ]
    },
    {
      "name": "[replace(concat(parameters('storageAccountName'), resourceGroup().name),'-', '')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "name": "[parameters('virtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2016-12-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "[parameters('networkInterfaceName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/subnets/', parameters('subnetName'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.4",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "name": "[parameters('publicIpAddressName')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
      }
    },
    {
      "name": "[parameters('registryInterfaceName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', parameters('registryPublicIpAddressName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/subnets/', parameters('subnetName'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.5",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('registryPublicIpAddressName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "name": "[parameters('registryPublicIpAddressName')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
      }
    },
    {
      "name": "[parameters('productionInterfaceName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', parameters('productionPublicIpAddressName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/subnets/', parameters('subnetName'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.6",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('productionPublicIpAddressName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "name": "[parameters('productionPublicIpAddressName')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
      }
    },
    {
      "name": "[parameters('networkSecurityGroupName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-docker-remote",
            "properties": {
              "priority": 1400,
              "sourceAddressPrefix": "*",
              "protocol": "TCP",
              "destinationPortRange": "2376",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "allow-registry",
            "properties": {
              "priority": 1300,
              "sourceAddressPrefix": "*",
              "protocol": "TCP",
              "destinationPortRange": "5000",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "allow-http-dev",
            "properties": {
              "priority": 1200,
              "sourceAddressPrefix": "*",
              "protocol": "TCP",
              "destinationPortRange": "3000",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "allow-http",
            "properties": {
              "priority": 1100,
              "sourceAddressPrefix": "*",
              "protocol": "TCP",
              "destinationPortRange": "80",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1000,
              "sourceAddressPrefix": "*",
              "protocol": "TCP",
              "destinationPortRange": "22",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    }
  }
}